What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository it sets up the directory to be able to
be controlled with git.  This is useful for being able to control different
versions of the directory.

------

How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area is the area in which files are added that will need
to be commited.  The value in this is that it presents an area for the 
user to observe what files they have added that will be commited, ensuring
other files that they do not wish to be commited are not commited.

-----

How can you use the staging area to make sure you have on commit per logical
change?

Using "git status" will allow the user to see what is currently in the staging
area.  They can also use "git diff" to see the difference between the staging
area and the repository, which will show the differences between the files
showing the user what changes have been made.  Once the user is sure that 
only one logical change has been made, they can commit their change with
a clear message.

-----

What are some situations whn branches would be helpful in keeping your 
history organized? How would branches help?

Branches can be used for experimental features that you do not wish 
to add to the master (yet).  With braches users can experiment with their
programs without affecting the main branch.

-----

How do the diagrams help you visualize the branch structure?

The diagrams give a visual representations of commits and their branches.
With the diagrams users can see where commits are branched off from the
master branch.

-----

What is the result of merging two branches together? Why do we represent
it in the diagram the way we do?

The result of merging two branches together is combining the lines of code
that was added in another branch to the other branch, keeping and removing
lines as necessary.

-----

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Pros:
- Easy
- Fast
- Saves time
Cons:
- Conflicts
- May not merge correctly

-----


