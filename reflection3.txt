When would you want to use a remote repository rather than keeping all your work 
local?

Users would want to do this if they wish to collaborate with others on their 
work.

-----

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

It makes sense to pull changes manually because changes in the working directory
would be overwritten.

-----

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Forks: Use to copy a repository on GitHub in order to modify it for your own
purposes.

Clones: Use to make a copy of a repository to a local directory.

Branch: Use to add an experimental commit branch for things such as new features
leaving the master branch intact.

-----

What is the benefit of having a copy of the last known state of the remote
stored locally?

The benefit of this is that you have a saved point in which your repository
matched the other repository at a given time.  With this, it can be observable
what changes have been made since it was last copied on both GitHub and the
local repository.

-----

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Without the use of Git or GitHub, I would assign team members to work on 
specific features of a program and manually merge them together once a 
feature has been complete.  Using GitHub makes collaboration much easier.

-----

When would you want to make changes in a serparate branch rather than directly
in master? What benefits does each aproach have?

Making changes in a seperate branch rather than the master makes sense when 
you want to experiment or add a feature but still leave master intact.  When
the feature is implemented, a pull request can be made so that others can 
review the changes that have been made before merging them. One downside is that
it is more complicated because if changes were made to the master while working 
on this branch, those changes must be merged into the branch first before being 
able to merge the branch to the master in the GitHub repository.

-----
